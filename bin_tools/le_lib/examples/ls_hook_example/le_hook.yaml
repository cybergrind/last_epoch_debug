hooks:

  # QoL: great, pickup without clickin on item
  - name: disable_click_check_2
    # EpochInputManager$$GetInteractMoveButtonDown
    # replaced with call to
    # EpochInputManager$$GetInteractMoveButtonHold
    # def tohex(val, nbits): return hex((val + (1 << nbits)) % (1 << nbits))
    # Keep the rest of instructions intact
    target_address: '0x1ec61fa'
    memory_content: '\xe8\x41\x71\xf3\xff'
    hook_functions: []
    memory_overwrite: '\xe8\x91\x71\xf3\xff'
    target_process: 'Last Epoch.exe'
    base_file: 'GameAssembly.dll'
    align_size: 5
    overwritten_instructions: ''

  # QoL: great, pickup without stopping
  - name: disable_block_movement
    # in GroundItemLabelButton Update
    # replace call to EpochInputManager$$set_ShouldBlockMovementOnCurrentClickDownState
    target_address: '0x1ec6257'
    memory_content: '\xe8\x44\x35\xF4\xFF'
    hook_functions: []
    memory_overwrite: '\x90\x90\x90\x90\x90'
    target_process: 'Last Epoch.exe'
    base_file: 'GameAssembly.dll'
    align_size: 5
    overwritten_instructions: ''

  # QoL: good, works only for nearest items
  - name: auto_pickup_hook
    # in SetGroundTooltipText
    # 0f 84 a9 01 00 00 45 33 c9 41 b0 01 48 8b d7 e8
    target_address: '0x1ec79e3'
    memory_content: 'E3\xc9A\xb0\x01H\x8b\xd7\xe8\xbf\x9d='
    hook_functions:
      #- le_lib_echo
      - le_lib_pickup
    target_process: 'Last Epoch.exe'
    base_file: 'GameAssembly.dll'
    align_size: 14
    overwritten_instructions: |
      xor r9d, r9d
      mov r8b, 1
      mov rdx, rdi
      ;; base is: {# 0x0 #}

      ;; save return address
      mov r11, {{ src_address }}
      add r11, 14
      ;; save as return address
      push r11

      ;; address for: TMPro.TMP_Text$$SetText
      mov r11, {# 0x32a17b0 #}
      ;; call {# 0x32a17b0 #}
      jmp r11


  - name: force_instant_cast_for_all_abilities
    target_address: '0xefab99'
    memory_content: '\x0f\x85\x0c\x08\x00\x00'  # jne 0xefb3ab
    hook_functions: []
    memory_overwrite: '\xe9\x0d\x08\x00\x00\x90'  # jmp 0xefb3ab + nop
    target_process: 'Last Epoch.exe1'
    base_file: 'GameAssembly.dll'
    align_size: 6
    overwritten_instructions: ''

  # ClientUsingAbilityState__AttemptToUseOrPrepareAbility
  - name: ability_hook
    target_address: '0xefab95'
    memory_content: '\x44\x38\x60\x25\x0f\x85\x0c\x08\x00\x00\x0f\xb6\x45\xe0'
    hook_functions:
      - le_lib_ability_hook
      #- le_lib_echo
    target_process: 'Last Epoch.exe'
    base_file: 'GameAssembly.dll'
    align_size: 14
    overwritten_instructions: |
      ;; base is: {# 0x0 #}
      ; original instruction:
      ;cmp byte [rax+0x25], r12b

      ; we've set r8 to the value of instant_cast
      cmp r8b, r12b

      jne .ifzero
      xor rax, rax
      movzx eax, byte [rbp-0x20]
      push rax
      mov rax, {{ src_address }}
      add rax, 0xd
      jmp rax
      .ifzero:
      mov rax, {# 0xefb3ab #}
      jmp rax

  - name: ability_hook_2
    target_address: '0xefab69'
    memory_content: '\x89u\x08H\x8dL$p\xf2\x0f\x11t$p'
    hook_functions:
      - le_lib_ability_hook
      #- le_lib_echo
    target_process: 'Last Epoch.exei1'
    base_file: 'GameAssembly.dll'
    align_size: 14
    overwritten_instructions: |
      ;; base is: {# 0x0 #}
      mov dword [rbp+0x8], esi
      lea rcx, [rsp+0x70]
      movsd qword [rsp+0x70], xmm6
